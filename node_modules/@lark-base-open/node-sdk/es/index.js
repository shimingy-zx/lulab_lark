/**
 * MIT License
 *
 * Copyright (c) 2023 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import get from 'lodash.get';
import axios, { AxiosError } from 'axios';
import 'crypto';
import identity from 'lodash.identity';
import pickBy from 'lodash.pickby';
import fs from 'fs';
import pick from 'lodash.pick';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const defaultHttpInstance = axios.create();
defaultHttpInstance.interceptors.request.use((req) => {
    if (req.headers) {
        req.headers['User-Agent'] = 'base-open-sdk-node/v1.0.0';
    }
    return req;
}, undefined, { synchronous: true });
defaultHttpInstance.interceptors.response.use((resp) => resp.data);

var AppType;
(function (AppType) {
    AppType[AppType["SelfBuild"] = 0] = "SelfBuild";
    AppType[AppType["ISV"] = 1] = "ISV";
})(AppType || (AppType = {}));
var Domain;
(function (Domain) {
    Domain[Domain["Feishu"] = 0] = "Feishu";
    Domain[Domain["Lark"] = 1] = "Lark";
})(Domain || (Domain = {}));
var LoggerLevel;
(function (LoggerLevel) {
    LoggerLevel[LoggerLevel["fatal"] = 0] = "fatal";
    LoggerLevel[LoggerLevel["error"] = 1] = "error";
    LoggerLevel[LoggerLevel["warn"] = 2] = "warn";
    LoggerLevel[LoggerLevel["info"] = 3] = "info";
    LoggerLevel[LoggerLevel["debug"] = 4] = "debug";
    LoggerLevel[LoggerLevel["trace"] = 5] = "trace";
})(LoggerLevel || (LoggerLevel = {}));

const formatDomain = (domain) => {
    switch (domain) {
        case Domain.Feishu:
            return 'https://base-api.feishu.cn';
        case Domain.Lark:
            return 'https://base-api.larksuite.com';
        default:
            return domain;
    }
};

const fillApiPath = (apiPath, pathSupplement = {}) => apiPath.replace(/:([^/]+)/g, (_, $1) => {
    if (pathSupplement[$1] !== undefined) {
        return pathSupplement[$1];
    }
    throw new Error(`request miss ${$1} path argument`);
});

const formatUrl = (url) => (url ? url.replace(/^\//, '') : '');

const formatErrors = (e) => {
    if (e instanceof AxiosError) {
        const { message, response, request, config } = pick(e, [
            'message',
            'response',
            'request',
            'config',
        ]);
        const filteredErrorInfo = {
            message,
            config: pick(config, ['data', 'url', 'params', 'method']),
            request: pick(request, ['protocol', 'host', 'path', 'method']),
            response: pick(response, ['data', 'status', 'statusText']),
        };
        const errors = [filteredErrorInfo];
        const specificError = get(e, 'response.data');
        if (specificError) {
            errors.push(specificError);
        }
        return errors;
    }
    return [e];
};

// auto gen
class Client {
    constructor() {
        /**
         * 云文档-多维表格
         */
        this.base = {
            /**
             * 多维表格
             */
            app: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app&apiName=copy&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=copy&project=bitable&resource=app&version=v1 document }
                 */
                copy: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/copy`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/api-explorer?from=op_doc_tab&apiName=create&project=bitable&resource=app&version=v1 document }
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/get document }
                 *
                 * 获取多维表格元数据
                 *
                 * 获取指定多维表格的元数据信息，包括多维表格名称，多维表格版本号，多维表格是否开启高级权限等。
                 *
                 * 该接口支持调用频率上限为 20 QPS（Query Per Second，每秒请求率）
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update document }
                 *
                 * 更新多维表格元数据
                 *
                 * 通过 app_token 更新多维表格元数据
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 *
                 * - 飞书文档、飞书表格、知识库中的多维表格不支持开启高级权限;- 此接口非原子操作，先修改多维表格名字，后开关高级权限。可能存在部分成功的情况
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 仪表盘
             */
            appDashboard: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.dashboard&apiName=copy&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/copy document }
                 *
                 * 复制仪表盘
                 *
                 * 该接口用于根据现有仪表盘复制出新的仪表盘
                 */
                copy: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards/:block_id/copy`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.dashboard&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-dashboard/list document }
                 *
                 * 列出仪表盘
                 *
                 * 根据 app_token，获取多维表格下的所有仪表盘
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 自定义角色
             */
            appRole: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create document }
                 *
                 * 新增自定义角色
                 *
                 * 新增自定义角色
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/delete document }
                 *
                 * 删除自定义角色
                 *
                 * 删除自定义角色
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list document }
                 *
                 * 列出自定义角色
                 *
                 * 列出自定义角色
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/update document }
                 *
                 * 更新自定义角色
                 *
                 * 更新自定义角色
                 *
                 * 更新自定义角色是全量更新，会完全覆盖旧的自定义角色设置
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 协作者
             */
            appRoleMember: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role.member&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/batch_create document }
                 *
                 * 批量新增协作者
                 *
                 * 批量新增自定义角色的协作者
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role.member&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/batch_delete document }
                 *
                 * 批量删除协作者
                 *
                 * 批量删除自定义角色的协作者
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role.member&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/create document }
                 *
                 * 新增协作者
                 *
                 * 新增自定义角色的协作者
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role.member&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/delete document }
                 *
                 * 删除协作者
                 *
                 * 删除自定义角色的协作者
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/:member_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.role.member&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/list document }
                 *
                 * 列出协作者
                 *
                 * 列出自定义角色的协作者
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 数据表
             */
            appTable: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_create document }
                 *
                 * 新增多个数据表
                 *
                 * 新增多个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_delete document }
                 *
                 * 删除多个数据表
                 *
                 * 删除多个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/create document }
                 *
                 * 新增数据表
                 *
                 * 新增一个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/delete document }
                 *
                 * 删除数据表
                 *
                 * 删除一个数据表
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list document }
                 *
                 * 列出数据表
                 *
                 * 根据  app_token，获取多维表格下的所有数据表
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/patch document }
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 字段
             */
            appTableField: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.field&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create document }
                 *
                 * 新增字段
                 *
                 * 该接口用于在数据表中新增一个字段
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.field&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/delete document }
                 *
                 * 删除字段
                 *
                 * 该接口用于在数据表中删除一个字段
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.field&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list document }
                 *
                 * 列出字段
                 *
                 * 根据 app_token 和 table_id，获取数据表的所有字段
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.field&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update document }
                 *
                 * 更新字段
                 *
                 * 该接口用于在数据表中更新一个字段
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 表单
             */
            appTableFormField: {
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.form.field&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/list document }
                 *
                 * 列出表单问题
                 *
                 * 列出表单的所有问题项
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.form.field&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/patch document }
                 *
                 * 更新表单问题
                 *
                 * 该接口用于更新表单中的问题项
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields/:field_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 表单
             */
            appTableForm: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.form&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form/get document }
                 *
                 * 获取表单元数据
                 *
                 * 获取表单的所有元数据项
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.form&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form/patch document }
                 *
                 * 更新表单元数据
                 *
                 * 该接口用于更新表单中的元数据项
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 记录
             */
            appTableRecord: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=batch_create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create document }
                 *
                 * 新增多条记录
                 *
                 * 该接口用于在数据表中新增多条记录，单次调用最多新增 500 条记录。
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
                 */
                batchCreate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=batch_delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_delete document }
                 *
                 * 删除多条记录
                 *
                 * 该接口用于删除数据表中现有的多条记录，单次调用中最多删除 500 条记录。
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchDelete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=batch_update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_update document }
                 *
                 * 更新多条记录
                 *
                 * 该接口用于更新数据表中的多条记录，单次调用最多更新 500 条记录。
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                batchUpdate: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/create document }
                 *
                 * 新增记录
                 *
                 * 该接口用于在数据表中新增一条记录
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/delete document }
                 *
                 * 删除记录
                 *
                 * 该接口用于删除数据表中的一条记录
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get document }
                 *
                 * 检索记录
                 *
                 * 该接口用于根据 record_id 的值检索现有记录
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list document }
                 *
                 * 列出记录
                 *
                 * 该接口用于列出数据表中的现有记录，单次最多列出 500 行记录，支持分页获取。
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率），1000 QPM（Query Per Minute，每分钟请求率）
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.record&apiName=update&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/update document }
                 *
                 * 更新记录
                 *
                 * 该接口用于更新数据表中的一条记录
                 *
                 * 该接口支持调用频率上限为 10 QPS（Query Per Second，每秒请求率）
                 */
                update: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`, path),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
            /**
             * 视图
             */
            appTableView: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.view&apiName=create&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/create document }
                 *
                 * 新增视图
                 *
                 * 在数据表中新增一个视图
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                create: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`, path),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.view&apiName=delete&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/delete document }
                 *
                 * 删除视图
                 *
                 * 删除数据表中的视图
                 *
                 * 该接口支持调用频率上限为 10 QPS
                 */
                delete: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`, path),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.view&apiName=get&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/get document }
                 *
                 * 检索视图
                 *
                 * 该接口根据 view_id 检索现有视图
                 */
                get: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                listWithIterator: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const sendRequest = (innerPayload) => __awaiter(this, void 0, void 0, function* () {
                        const res = yield this.httpInstance
                            .request({
                            url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`, path),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                            .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                        return res;
                    });
                    const Iterable = {
                        [Symbol.asyncIterator]() {
                            return __asyncGenerator(this, arguments, function* _a() {
                                let hasMore = true;
                                let pageToken;
                                while (hasMore) {
                                    try {
                                        const res = yield __await(sendRequest({
                                            headers,
                                            params: Object.assign(Object.assign({}, params), { page_token: pageToken }),
                                            data,
                                        }));
                                        const _b = get(res, "data") || {}, { 
                                        // @ts-ignore
                                        has_more, 
                                        // @ts-ignore
                                        page_token, 
                                        // @ts-ignore
                                        next_page_token } = _b, rest = __rest(_b, ["has_more", "page_token", "next_page_token"]);
                                        yield yield __await(rest);
                                        hasMore = Boolean(has_more);
                                        pageToken = page_token || next_page_token;
                                    }
                                    catch (e) {
                                        yield yield __await(null);
                                        break;
                                    }
                                }
                            });
                        },
                    };
                    return Iterable;
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.view&apiName=list&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list document }
                 *
                 * 列出视图
                 *
                 * 根据 app_token 和 table_id，获取数据表的所有视图
                 *
                 * 该接口支持调用频率上限为 20 QPS
                 */
                list: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`, path),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=base&resource=app.table.view&apiName=patch&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/patch document }
                 *
                 * 更新视图
                 *
                 * 该接口用于增量修改视图信息
                 */
                patch: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    return this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`, path),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                }),
            },
        };
        /**
         * 云文档-文件管理
         */
        this.drive = {
            /**
             * 素材
             */
            media: {
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=download&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/download document }
                 *
                 * 下载素材
                 *
                 * 使用该接口可以下载素材。素材表示在各种创作容器里的文件，如Doc文档内的图片，文件均属于素材。支持range下载。
                 *
                 * 该接口不支持太高的并发，且调用频率上限为5QPS
                 */
                download: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/:file_token/download`, path),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return {
                        writeFile: (filePath) => __awaiter(this, void 0, void 0, function* () {
                            return new Promise((resolve, reject) => {
                                const writableStream = fs.createWriteStream(filePath);
                                writableStream.on("finish", () => {
                                    resolve(filePath);
                                });
                                writableStream.on("error", (e) => {
                                    reject(e);
                                });
                                res.pipe(writableStream);
                            });
                        }),
                    };
                }),
                /**
                 * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_all&version=v1 click to debug }
                 *
                 * {@link https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all document }
                 *
                 * 上传素材
                 *
                 * 将文件、图片、视频等素材文件上传到指定云文档中。素材文件在云空间中不会显示，只会显示在对应云文档中。
                 *
                 * 该接口支持调用频率上限为5QPS
                 *
                 * 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/multipart-upload-media/introduction)。
                 */
                uploadAll: (payload, options) => __awaiter(this, void 0, void 0, function* () {
                    const { headers, params, data, path } = yield this.formatPayload(payload, options);
                    const res = yield this.httpInstance
                        .request({
                        url: fillApiPath(`${this.domain}/open-apis/drive/v1/medias/upload_all`, path),
                        method: "POST",
                        data,
                        params,
                        headers: Object.assign(Object.assign({}, headers), { "Content-Type": "multipart/form-data" }),
                    })
                        .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
                    return get(res, "data", null);
                }),
            },
        };
    }
}

const defaultLogger = {
    error: (...msg) => {
        console.log('[error]:', ...msg);
    },
    warn: (...msg) => {
        console.warn('[warn]:', ...msg);
    },
    info: (...msg) => {
        console.info('[info]:', ...msg);
    },
    debug: (...msg) => {
        console.debug('[debug]:', ...msg);
    },
    trace: (...msg) => {
        console.trace('[trace]:', ...msg);
    },
};

class LoggerProxy {
    constructor(level, logger) {
        this.level = level;
        this.logger = logger;
    }
    error(...msg) {
        if (this.level >= LoggerLevel.error) {
            this.logger.error(msg);
        }
    }
    warn(...msg) {
        if (this.level >= LoggerLevel.warn) {
            this.logger.warn(msg);
        }
    }
    info(...msg) {
        if (this.level >= LoggerLevel.info) {
            this.logger.info(msg);
        }
    }
    debug(...msg) {
        if (this.level >= LoggerLevel.debug) {
            this.logger.debug(msg);
        }
    }
    trace(...msg) {
        if (this.level >= LoggerLevel.trace) {
            this.logger.trace(msg);
        }
    }
}

class BaseClient extends Client {
    constructor(params) {
        super();
        this.logger = new LoggerProxy(params.loggerLevel || LoggerLevel.info, params.logger || defaultLogger);
        this.domain = formatDomain(params.domain || Domain.Feishu);
        this.logger.debug(`use domain url: ${this.domain}`);
        this.httpInstance = params.httpInstance || defaultHttpInstance;
        this.appToken = params.appToken;
        this.personalBaseToken = params.personalBaseToken;
        this.logger.info('client ready');
    }
    formatPayload(payload, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const targetOptions = [
                'lark',
                'params',
                'data',
                'headers',
                'path',
            ].reduce((acc, key) => {
                acc[key] = get(options, key, {});
                return acc;
            }, {});
            // 注入鉴权 header
            if (this.personalBaseToken) {
                targetOptions.headers.Authorization = `Bearer ${this.personalBaseToken}`;
            }
            return {
                params: Object.assign(Object.assign({}, get(payload, 'params', {})), targetOptions.params),
                headers: Object.assign(Object.assign({}, get(payload, 'headers', {})), targetOptions.headers),
                data: Object.assign(Object.assign({}, get(payload, 'data', {})), targetOptions.data),
                path: Object.assign(Object.assign(Object.assign({}, get(payload, 'path', {})), targetOptions.path), { 
                    // 注入需要操作的 base
                    app_token: this.appToken }),
            };
        });
    }
    request(payload, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, params, headers, url } = payload, rest = __rest(payload, ["data", "params", "headers", "url"]);
            const formatPayload = yield this.formatPayload({
                data,
                params,
                headers,
            }, options);
            this.logger.trace(`send request [${payload.method}]: ${payload.url}`);
            const res = yield this.httpInstance
                .request(Object.assign(Object.assign({}, rest), {
                url: /^http/.test(url)
                    ? url
                    : `${this.domain}/${formatUrl(url)}`,
                headers: formatPayload.headers,
                data: formatPayload.data,
                params: formatPayload.params,
            }))
                .catch((e) => {
                this.logger.error(e);
                throw e;
            });
            return res;
        });
    }
}

export { AppType, BaseClient, Domain, LoggerLevel };
